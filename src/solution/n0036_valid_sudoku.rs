pub struct Solution;

// 验证数独的有效性
impl Solution {
    pub fn is_valid_sudoku(board: Vec<Vec<char>>) -> bool {
        // 新的声明vec的方式，学习一下
        // 创建1×9的向量。用每个元素的bit位来表示行或者列的情况
        let mut rows = vec![0u16; 9];
        let mut cols = vec![0u16; 9];
        let mut blks = vec![vec![0u16; 3]; 3];
        for i in 0..9 {
            for j in 0..9 {
                // '' 单引号包裹的是char类型
                if board[i][j] == '.' {
                    continue;
                }
                // 如果存在数字
                let n = board[i][j] as u8 - '0' as u8;
                if rows[i] & (1 << n) != 0
                    || cols[j] & (1 << n) != 0
                    || blks[i / 3][j / 3] & (1 << n) != 0
                {
                    return false;
                }
                // 置位
                rows[i] ^= 1 << n;
                cols[j] ^= 1 << n;
                // Rust中 / 默认取整？
                blks[i / 3][j / 3] ^= 1 << n;
            }
        }
        true
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_0036() {
        assert_eq!(
            Solution::is_valid_sudoku(vec![
                vec!['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
                vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
                vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
                vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
                vec!['.', '.', '.', '.', '8', '.', '.', '7', '9']
            ]),
            true
        );
        assert_eq!(
            Solution::is_valid_sudoku(vec![
                vec!['8', '3', '.', '.', '7', '.', '.', '.', '.'],
                vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
                vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
                vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
                vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
                vec!['.', '.', '.', '.', '8', '.', '.', '7', '9']
            ]),
            false
        );
    }
}
