pub struct Solution;
/*
Áªô‰Ω†‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ path ÔºåË°®Á§∫ÊåáÂêëÊüê‰∏ÄÊñá‰ª∂ÊàñÁõÆÂΩïÁöÑ Unix È£éÊ†º ÁªùÂØπË∑ØÂæÑ Ôºà‰ª• '/' ÂºÄÂ§¥ÔºâÔºåËØ∑‰Ω†Â∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫Êõ¥Âä†ÁÆÄÊ¥ÅÁöÑËßÑËåÉË∑ØÂæÑ„ÄÇ

Âú® Unix È£éÊ†ºÁöÑÊñá‰ª∂Á≥ªÁªü‰∏≠Ôºå‰∏Ä‰∏™ÁÇπÔºà.ÔºâË°®Á§∫ÂΩìÂâçÁõÆÂΩïÊú¨Ë∫´ÔºõÊ≠§Â§ñÔºå‰∏§‰∏™ÁÇπ Ôºà..Ôºâ Ë°®Á§∫Â∞ÜÁõÆÂΩïÂàáÊç¢Âà∞‰∏ä‰∏ÄÁ∫ßÔºàÊåáÂêëÁà∂ÁõÆÂΩïÔºâÔºõ‰∏§ËÄÖÈÉΩÂèØ‰ª•ÊòØÂ§çÊùÇÁõ∏ÂØπË∑ØÂæÑÁöÑÁªÑÊàêÈÉ®ÂàÜ„ÄÇ‰ªªÊÑèÂ§ö‰∏™ËøûÁª≠ÁöÑÊñúÊù†ÔºàÂç≥Ôºå'//'ÔºâÈÉΩË¢´ËßÜ‰∏∫Âçï‰∏™ÊñúÊù† '/' „ÄÇ ÂØπ‰∫éÊ≠§ÈóÆÈ¢òÔºå‰ªª‰ΩïÂÖ∂‰ªñÊ†ºÂºèÁöÑÁÇπÔºà‰æãÂ¶ÇÔºå'...'ÔºâÂùáË¢´ËßÜ‰∏∫Êñá‰ª∂/ÁõÆÂΩïÂêçÁß∞„ÄÇ

ËØ∑Ê≥®ÊÑèÔºåËøîÂõûÁöÑ ËßÑËåÉË∑ØÂæÑ ÂøÖÈ°ªÈÅµÂæ™‰∏ãËø∞Ê†ºÂºèÔºö

    ÂßãÁªà‰ª•ÊñúÊù† '/' ÂºÄÂ§¥„ÄÇ
    ‰∏§‰∏™ÁõÆÂΩïÂêç‰πãÈó¥ÂøÖÈ°ªÂè™Êúâ‰∏Ä‰∏™ÊñúÊù† '/' „ÄÇ
    ÊúÄÂêé‰∏Ä‰∏™ÁõÆÂΩïÂêçÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ‰∏çËÉΩ ‰ª• '/' ÁªìÂ∞æ„ÄÇ
    Ê≠§Â§ñÔºåË∑ØÂæÑ‰ªÖÂåÖÂê´‰ªéÊ†πÁõÆÂΩïÂà∞ÁõÆÊ†áÊñá‰ª∂ÊàñÁõÆÂΩïÁöÑË∑ØÂæÑ‰∏äÁöÑÁõÆÂΩïÔºàÂç≥Ôºå‰∏çÂê´ '.' Êàñ '..'Ôºâ„ÄÇ

ËøîÂõûÁÆÄÂåñÂêéÂæóÂà∞ÁöÑ ËßÑËåÉË∑ØÂæÑ „ÄÇ
 * */

// ÂÖ≥ÈîÆÊÄùË∑ØÔºöÊÉ≥Âà∞ÂØπpathËøõË°å"/" splitÊìç‰Ωú
impl Solution {
    pub fn simplify_path(path: String) -> String {
        // ÊòØ‰∏çÊòØË¶ÅÁî®Ê†àÊù•Ê®°Êãü
        let mut stack: Vec<String> = Vec::new();
        // ÈÄêÂ≠óÁ¨¶Â§ÑÁêÜ
        let mut tmp_s: String = String::new();
        // ‰ªéÁ¥¢Âºï1ÂºÄÂßãÈÅçÂéÜ
        for c in path.chars().skip(1) {
            match c {
                // Á¢∞Âà∞‰∏Ä‰∏™ '/' Â≠óÁ¨¶
                '/' => {
                    // ‰∏çËøõË°åÊìç‰ΩúÔºåÊ∏ÖÈô§tmp_s
                    if tmp_s.eq(".") {
                        tmp_s.clear();
                        continue;
                    }
                    // Âá∫Ê†à
                    if tmp_s.eq("..") {
                        if !stack.is_empty() {
                            stack.pop();
                        }
                        tmp_s.clear();
                        continue;
                    }
                    // ÂéãÊ†à
                    if !tmp_s.is_empty() {
                        stack.push(tmp_s.clone());
                        tmp_s.clear();
                    }
                }
                _ => {
                    tmp_s.push(c);
                }
            }
        }
        // ÂØπÊúÄÂêé‰∏Ä‰∏™ÂçïËØçÂÅöÂ§ÑÁêÜ
        if !tmp_s.is_empty() {
            if tmp_s.eq("..") && !stack.is_empty() {
                stack.pop();
            } else if tmp_s.eq(".") {
                tmp_s.clear();
            } else {
                if !tmp_s.eq("..") {
                    stack.push(tmp_s);
                }
            }
        }
        let mut ans: String = String::from("/");
        ans.push_str(&(stack.join("/"))[..]);
        ans
    }
    // ÁúãÁúã‰∫∫ÂÆ∂ÁöÑÔºå9Ë°åÊêûÂÆöÔºåÊàëtmÂÜô‰∫ÜÂø´50Ë°åü§£
    pub fn simplify_path_ii(path: String) -> String {
        let mut queue = Vec::new();
        path.split("/").for_each(|level| {
            match level {
                "." | "" => (),
                ".." => { queue.pop(); }, // Á©∫ÁöÑ‰πüËÉΩpopÂêóÔºåÂ•ΩÂÉèÊòØÁöÑ...
                _ => queue.push(level),
            }
        });
        "/".to_string() + &queue.join("/")
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_0071() {
        assert_eq!(
            Solution::simplify_path(String::from("/home/")),
            String::from("/home")
        );
        assert_eq!(
            Solution::simplify_path(String::from("/../")),
            String::from("/")
        );
        assert_eq!(
            Solution::simplify_path(String::from("/home//foo/")),
            String::from("/home/foo")
        );
        assert_eq!(
            Solution::simplify_path(String::from("/a/./b/../../c/")),
            String::from("/c")
        );
        assert_eq!(
            Solution::simplify_path(String::from("/a//b////c/d//././/..")),
            String::from("/a/b/c")
        );
        assert_eq!(
            Solution::simplify_path(String::from("/..")),
            String::from("/")
        );
    }
}
